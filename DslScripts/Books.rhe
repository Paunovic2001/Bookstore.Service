Module Bookstore
{
    Entity Book
    {
        ShortString Code { AutoCode; }
        ShortString Title;
        Integer NumberOfPages;
        Reference Author Bookstore.Person;
        Reference Employee Bookstore.Employee { Detail; }
        MonitoredRecord;

        //day 4
        RowPermissions
        {
            Allow OwnerAccess 'context => 
            {
                Guid myEmployeeId = context.Repository.Bookstore.Employee.Query()
                    .Where(e => e.Name == context.UserInfo.UserName)
                    .Select(e => e.ID)
                    .SingleOrDefault();
                return item => true/*item.Employee.ID == myEmployeeId*/;
            }';

            Allow AdminAccess 'context =>
            {
                Guid principalId = context.Repository.Common.Principal.Query()
                    .Where(p => p.Name == context.UserInfo.UserName)
                    .Select(p => p.ID)
                    .SingleOrDefault();

                Guid? roleId = context.Repository.Common.PrincipalHasRole.Query()
                    .Where(phr => phr.PrincipalID == principalId)
                    .Select(phr => phr.RoleID)
                    .First();

                return item => true /*context.Repository.Common.Role.Query(r => r.ID == roleId).SingleOrDefault().Name == "Admin"*/ ;
            }
            ';

            AllowRead EveryoneCanRead 'context => book => true';
        }

        //day3 item filter
        ItemFilter LongTitle 'item => item.Title.Length > 10';

        ItemFilter CommonMisspelling 'book => book.Title.Contains("curiousity")';
        InvalidData CommonMisspelling 'It is not allowed to enter misspelled word "curiousity".';

        ComposableFilterBy BooksContainingLetterAInTitleAndLongerThan '(query, repository, parameter) => 
            {
                return query.Where(item => (item.Title.Contains("a") || item.Title.Contains("A")) && item.NumberOfPages >= parameter.NumberOfPages);
            }';

        FilterBy ComplexSearch '(repository, parameter) => 
        {
            var query = repository.Bookstore.Book.Query(item => item.NumberOfPages >= parameter.MinimumPages);
            if (parameter.HasAuthor == true)
            {
                query = query.Where(item => string.IsNullOrEmpty(item.AuthorID.ToString()) == false);
            }

            Book[] books = query.ToSimple().ToArray();

            if(parameter.CensorTitle == true) 
            {
                foreach(var book in books)
                {
                    book.Title = book.Title.First() + "%#%@^!%" + book.Title.Last();
                }
            }

            return books;
        }';


        //logging
        Logging;
    }

    Entity NumberOfReviews
    {
        Extends Bookstore.Book;
        Integer Count;
    }

    Entity Review
    {
        Reference Book { Required; }
        Integer Score { Required; MinValue 1; MaxValue 5; }
        LongString Text;
        DateTime LastModifiedTime;

        SaveMethod
        {
            Initialization DefaultTextFromScore
                '
                    foreach (var item in insertedNew)
                        if (string.IsNullOrEmpty(item.Text) && item.Score != null)
                        {
                            item.Text = item.Score.Value >= 3
                                ? "I like it" : "I don''t like it";
                            item.LastModifiedTime = DateTime.Now; //demonstrated initialization on LastModifiedTime property
                        }
                ';
            
            LoadOldItems
            {
                Take Score;
                Take 'Book.Title';
            }

            OldDataLoaded AppendTextIfScoreChanged
                '
                    var itemsWithModifiedScore = updatedOld
                        .Zip(updatedNew, (oldValue, newValue) => new { oldValue, newValue })
                        .Where(modified => modified.oldValue.Score == null && modified.newValue.Score != null 
                        || modified.oldValue.Score != null && !modified.oldValue.Score.Equals(modified.newValue.Score)).ToList();

                    foreach (var item in itemsWithModifiedScore)
                        item.newValue.Text += string.Format(" (changed from {0} to {1})",
                            item.oldValue.Score,
                            item.newValue.Score);
                ';

            OnSaveUpdate UpdateNumberOfReviews
                '
                var bookIds = insertedNew.Select(review => review.BookID.Value)
                    .Concat(updatedNew.Select(review => review.BookID.Value))
                    .Concat(deletedIds.Select(review => review.BookID.Value))
                    .Distinct().ToList();

                var numberOfReviews = _domRepository.Bookstore.Book.Query(bookIds)
                    .Select(book => new NumberOfReviews
                    {
                        ID = book.ID,
                        Count = _domRepository.Bookstore.Review.Subquery.Where(r => r.BookID == book.ID).Count()
                    })
                    .ToList();

                var oldRecordIds = _domRepository.Bookstore.NumberOfReviews.Query(bookIds).Select(n => n.ID).ToList();
                _domRepository.Bookstore.NumberOfReviews.Insert(numberOfReviews.Where(r => !oldRecordIds.Contains(r.ID)));
                _domRepository.Bookstore.NumberOfReviews.Update(numberOfReviews.Where(r => oldRecordIds.Contains(r.ID)));
                ';

             OnSaveValidate DenyChangeOfLockedTitle
                '
                var itemsWithModifiedScore = updatedOld
                    .Zip(updatedNew, (oldValue, newValue) => new { oldValue, newValue })
                    .Where(modified => modified.oldValue.Score == null && modified.newValue.Score != null
                        || modified.oldValue.Score != null && !modified.oldValue.Score.Equals(modified.newValue.Score))
                    .Where(modified => modified.oldValue.BookTitle.IndexOf("lock", StringComparison.InvariantCultureIgnoreCase) >= 0)
                    .FirstOrDefault();

                if (itemsWithModifiedScore != null)
                    throw new Rhetos.UserException(string.Format(
                        "It is not allowed to modify score ({0} => {1}) for the book \"{2}\" because to contains \"lock\" in the title.",
                        itemsWithModifiedScore.oldValue.Score,
                        itemsWithModifiedScore.newValue.Score,
                        itemsWithModifiedScore.oldValue.BookTitle));
                ';
        }
    }

    SqlView LongBooksView <SQL\LongBooksView.sql>
    {
        AutoDetectSqlDependencies;
    }

    //changed to looking for book that starts with 'c' because there were no book that start with 'a' in the seed data
    SqlQueryable LongBooksStartWithA <SQL\LongBooksUse.sql> 
    {
        Extends Bookstore.Book;
        ShortString Title;
        Integer NumberOfPages;
        ShortString Code;
        
        AutodetectSqlDependencies; 
    }

    Parameter BooksContainingLetterAInTitleAndLongerThan
    {
        Integer NumberOfPages;
    }

    Parameter ComplexSearch 
    {
        Integer MinimumPages;
        Bool HasAuthor;
        Bool CensorTitle;
    }

    Entity Topic
    {
        ShortString Name { Unique; Required; }
    }

    Entity BookTopic
    {
        Reference Book { Detail; }
        Reference Topic { Required; }

        UniqueMultiple 'Book Topic';
    }

    Browse BookGrid Bookstore.Book
    {
        Take Code;
        Take Title;
        Take 'Author.Name';
        Take TranslatorName 'Extension_ForeignBook.Translator.Name';
        Take NumberOfComments 'Extension_BookInfo.NumberOfComments';
    }

    Browse BookTopicGrid Bookstore.Book
    {
        Take BookName 'Title';
        Take 'Author.Name';
        Take NumberOfTopics 'Extension_TotalTopicsForBook.NumberOfTopics';
    }
    
    SqlQueryable TotalTopicsForBook
    "
        SELECT
            b.ID,
            NumberOfTopics = COUNT(bt.ID)
        FROM 
            Bookstore.Book b
            JOIN BookTopic bt ON b.ID = bt.BookID 
        GROUP BY 
            b.ID
    "
    {
        Extends Bookstore.Book;
        Integer NumberOfTopics;

        SqlDependsOn Bookstore.BookTopic;
    }
    
    /*SqlQueryable BookInfo
        "
            SELECT
                b.ID,
                NumberOfComments = COUNT(c.ID)
            FROM
                Bookstore.Book b
                LEFT JOIN Bookstore.Comment c ON c.BookID = b.ID
            GROUP BY
                b.ID
        "
    {
        Extends Bookstore.Book;
        Integer NumberOfComments;
    
        AutodetectSqlDependencies;
    }*/


    //Same as BookInfo above, only it uses an external SQL script placed inside the SQL folder found in the DslScripts folder
    SqlQueryable BookInfo <SQL\BookInfo.sql>
    {
        Extends Bookstore.Book;
        Integer NumberOfComments;
    
        AutodetectSqlDependencies;
    }

    Computed ExpectedBookRating 'repository =>
        {
            var books = repository.Bookstore.Book.Query()
                .Select(b =>
                    new
                    {
                        b.ID,
                        b.Title,
                        IsForeign = b.Extension_ForeignBook.ID != null
                    })
                .ToList();

            var ratings = new List<ExpectedBookRating>();
            foreach (var book in books)
            {
                decimal rating = 0;

                if (book.Title?.IndexOf("super", StringComparison.InvariantCultureIgnoreCase) >= 0)
                    rating += 100;

                if (book.Title?.IndexOf("great", StringComparison.InvariantCultureIgnoreCase) >= 0)
                    rating += 50;

                if (book.IsForeign)
                    rating *= 1.2m;

                ratings.Add(new ExpectedBookRating { ID = book.ID, Rating = rating });
            }

            return ratings.ToArray();
        }'
    {
        Extends Bookstore.Book;
        Decimal Rating;
    }

    Action InsertRandomBooks
        '(parameter, repository, userInfo) => Bookstore.Service.BookActions.InsertBooksRandom(repository, parameter.NumberOfBooks)'
        {
            Integer NumberOfBooks;
        }

    Hardcoded Genre
    {
        ShortString Label; // Short text displayed to user.
        LongString Description;
        Bool IsFiction;

        Entry ScienceFiction
        {
            Value Label 'Science fiction';
            Value Description 'A speculative fiction with imagined elements that are inspired by natural sciences or social sciences.';
            Value IsFiction 1;
        }

        Entry Biography
        {
            Value Label 'Biography';
            Value Description 'A written narrative of a person''s life.';
            Value IsFiction 0;
        }
    }

    Entity Person
    {
        ShortString Name;
    }

    Entity Comment
    {
        Reference Book { Detail; }
        LongString Text;
    }

    Entity ChildrensBook
    {
        Extends Bookstore.Book;

        Integer AgeFrom;
        Integer AgeTo;
        IntegerRange AgeFrom AgeTo; // A simple validation.
    }

    Entity ForeignBook
    {
        Extends Bookstore.Book;

        ShortString OriginalLanguage;
        Reference Translator Bookstore.Person;
    }
}
